swagger: '2.0'
info:
  title: Redmine API
  version: 2.1.0
paths:
  /issues:
    get:
      operationId: getIssues
      parameters:
        - name: format
          in: query
          type: string
          required: true
        - name: subject
          in: query
          type: string
          description: you can use start query with ~ to search in content
        - name: project_id
          in: query
          type: integer
          description: |
            get issues from the project with the given id
            (a numeric value, not a project identifier)
        - name: subproject_id
          in: query
          type: string
          description: |
            get issues from the subproject with the given id.
            You can use project_id=XXX&subproject_id=!* to get
            only the issues of a given project and none of its subprojects.
        - name: tracker_id
          in: query
          type: integer
          description: get issues from the tracker with the given id
        - name: status_id
          in: query
          type: string
          description: |
            get issues with the given status id only.
            Possible values: open, closed, *
            to get open and closed issues, status id
        - name: assigned_to_id
          in: query
          type: string
          description: |
            get issues which are assigned to the given user id.
            "me" can be used instead an ID to fetch all issues
            from the logged in user (via API key or HTTP auth)
        - name: created_on
          in: query
          type: string
          description: >
            To fetch issues for a date range
            (uncrypted filter is "><2012-03-01|2012-03-07") :
            GET /issues.json?created_on=%3E%3C2012-03-01|2012-03-07
            To fetch issues created after a certain date (uncrypted filter is ">=2012-03-01") :
            GET /issues.xml?created_on=%3E%3D2012-03-01
        - name: cf_x
          in: query
          type: string
          description: |
            get issues with the given value for custom field with an ID of x.
            (Custom field must have 'used as a filter' checked.)
        - name: offset
          in: query
          type: integer
          description: skip this number of issues in response (optional)
        - name: limit
          in: query
          type: integer
          description: number of issues per page (optional)
        - name: sort
          in: query
          type: string
          description: |
            column to sort with. Append :desc to invert the order.
            /issues.json?sort=category:desc,updated_on
      responses:
        '200':
          description: A list of issues
          schema:
            type: object
            properties:
              issues:
                type: array
                items:
                  $ref: '#/definitions/Issue'
        '422':
          description: Can't process request
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: postIssue
      parameters:
        - name: format
          in: query
          type: string
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - issue
            properties:
              issue:
                type: object
                required:
                  - subject
                  - project_id
                properties:
                  subject:
                    type: string
                  project_id:
                    type: string
                  status_id:
                    type: integer
                  priority_id:
                    type: integer
                  tracker_id:
                    type: integer
                  description:
                    type: string
                  category_id:
                    type: integer
                    description: ID of the Target Versions
                  fixed_version_id:
                    type: integer
                    description: |
                      ID of the Target Versions
                      (previously called 'Fixed Version' and still referred to
                      as such in the API)
                  assigned_to_id:
                    type: integer
                    description: |
                      ID of the user to assign the issue to
                      (currently no mechanism to assign by name)
                  parent_issue_id:
                    type: integer
                    description: ID of the parent issue
                  watcher_user_ids:
                    type: array
                    description: Array of user ids to add as watchers
                  is_private:
                    type: boolean
                    description: |
                      Use true or false to indicate
                      whether the issue is private or not
                  estimated_hours:
                    type: integer
                    description: Number of hours estimated for issue
                  custom_fields:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        name:
                          type: string
                        id:
                          type: integer
      responses:
        '201':
          description: Issue succesfully posted
          schema:
            type: object
            properties:
              issue:
                $ref: '#/definitions/Issue'
        '422':
          description: Can't process request
          schema:
            $ref: '#/definitions/Error'
  /issues/{id}:
    get:
      operationId: getIssueById
      parameters:
        - name: format
          in: query
          type: string
          required: true
        - name: id
          in: path
          type: integer
          required: true
        - name: include
          in: query
          type: string
          description: |
            fetch associated data
            (optional, use comma to fetch multiple associations).
            Possible values: children, attachments, relations, changesets,
            journals, watchers
      responses:
        '200':
          description: Issue
          schema:
            type: object
            properties:
              issue:
                type: array
                $ref: '#/definitions/Issue'
    put:
      operationId: updateIssue
      parameters:
        - name: format
          in: query
          type: string
          required: true
        - name: id
          in: path
          type: integer
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - issue
            properties:
              issue:
                type: object
                properties:
                  subject:
                    type: string
                  project_id:
                    type: integer
                  status_id:
                    type: integer
                  tracker_id:
                    type: integer
                  description:
                    type: string
                  category_id:
                    type: integer
                  fixed_version_id:
                    type: integer
                  assigned_to_id:
                    type: integer
                  custom_fields:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        name:
                          type: string
                        id:
                          type: integer
                  notes:
                    type: string
                  private_notes:
                    type: boolean
                  start_date:
                    type: string
                    format: date
      responses:
        '200':
          description: Successfully updated
        '422':
          description: Can't process request
          schema:
            $ref: '#/definitions/Error'
  /time_entries:
    post:
      operationId: postTimeEntrie
      parameters:
        - name: format
          in: query
          type: string
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - time_entry
            properties:
              time_entry:
                type: object
                required:
                  - hours
                properties:
                  issue_id:
                    type: integer
                  project_id:
                    type: integer
                  spent_on:
                    type: string
                    format: date-time
                    description: the date the time was spent (default to the current date)
                  hours:
                    type: integer
                    description: the number of spent hours
                  activity_id:
                    type: integer
                    description: the id of the time activity. This parameter is required unless a default activity is defined in Redmine.
                  comments:
                    type: string
                    description: short description for the entry (255 characters max)
      responses:
        '201':
          description: Time entrie successfully added
          schema:
            type: object
        '422':
          description: Can't process request
          schema:
            $ref: '#/definitions/Error'
definitions:
  Generic:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  Issue:
    type: object
    properties:
      id:
        type: integer
      project:
        $ref: '#/definitions/Generic'
      tracker:
        $ref: '#/definitions/Generic'
      status:
        $ref: '#/definitions/Generic'
      priority:
        $ref: '#/definitions/Generic'
      author:
        $ref: '#/definitions/Generic'
      category:
        $ref: '#/definitions/Generic'
      subject:
        type: string
      description:
        type: string
      start_date:
        type: string
        format: date
      due_date:
        type: string
        format: date
      done_ratio:
        type: number
      estimated_hours:
        type: number
      custom_fields:
        type: object
      created_on:
        type: string
        format: date-time
      updated_on:
        type: string
        format: date-time
      spent_hours:
        type: number
      total_spent_hours:
        type: number
  Error:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
